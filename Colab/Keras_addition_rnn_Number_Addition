{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Keras_addition_rnn_Number_Addition","provenance":[{"file_id":"https://github.com/keras-team/keras-io/blob/master/examples/nlp/ipynb/addition_rnn.ipynb","timestamp":1619175193084}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.0"}},"cells":[{"cell_type":"code","metadata":{"id":"gHeE___ibuXm"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5K4HfVQ4W-Yf"},"source":["# Sequence to sequence learning for performing number addition\n","\n","**Author:** [Smerity](https://twitter.com/Smerity) and others<br>\n","**Date created:** 2015/08/17<br>\n","**Last modified:** 2020/04/17<br>\n","**Description:** A model that learns to add strings of numbers, e.g. \"535+61\" -> \"596\"."]},{"cell_type":"markdown","metadata":{"id":"3fufvo9eW-Yx"},"source":["## Introduction\n","\n","In this example, we train a model to learn to add two numbers, provided as strings.\n","\n","**Example:**\n","\n","- Input: \"535+61\"\n","- Output: \"596\"\n","\n","Input may optionally be reversed, which was shown to increase performance in many tasks\n"," in: [Learning to Execute](http://arxiv.org/abs/1410.4615) and\n","[Sequence to Sequence Learning with Neural Networks](\n","\n"," http://papers.nips.cc/paper/5346-sequence-to-sequence-learning-with-neural-networks.pdf)\n","\n","Theoretically, sequence order inversion introduces shorter term dependencies between\n"," source and target for this problem.\n","\n","**Results:**\n","\n","For two digits (reversed):\n","\n","+ One layer LSTM (128 HN), 5k training examples = 99% train/test accuracy in 55 epochs\n","\n","Three digits (reversed):\n","\n","+ One layer LSTM (128 HN), 50k training examples = 99% train/test accuracy in 100 epochs\n","\n","Four digits (reversed):\n","\n","+ One layer LSTM (128 HN), 400k training examples = 99% train/test accuracy in 20 epochs\n","\n","Five digits (reversed):\n","\n","+ One layer LSTM (128 HN), 550k training examples = 99% train/test accuracy in 30 epochs\n"]},{"cell_type":"markdown","metadata":{"id":"SFWypWvbW-Yz"},"source":["## Setup\n"]},{"cell_type":"code","metadata":{"id":"75Qiar0sW-Y0","executionInfo":{"status":"ok","timestamp":1619175330688,"user_tz":-330,"elapsed":2808,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}}},"source":["from tensorflow import keras\n","from tensorflow.keras import layers\n","import numpy as np\n","\n","# Parameters for the model and dataset.\n","TRAINING_SIZE = 50000\n","DIGITS = 3\n","REVERSE = True\n","\n","# Maximum length of input is 'int + int' (e.g., '345+678'). Maximum length of\n","# int is DIGITS.\n","MAXLEN = DIGITS + 1 + DIGITS\n"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aPUxV8cZW-Y2"},"source":["## Generate the data\n"]},{"cell_type":"code","metadata":{"id":"5wIsr4xJW-Y2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619175536690,"user_tz":-330,"elapsed":7952,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"7db52c32-a099-46a7-abe3-2d3c8e5e5ea1"},"source":["\n","class CharacterTable:\n","    \"\"\"Given a set of characters:\n","    + Encode them to a one-hot integer representation\n","    + Decode the one-hot or integer representation to their character output\n","    + Decode a vector of probabilities to their character output\n","    \"\"\"\n","\n","    def __init__(self, chars):\n","        \"\"\"Initialize character table.\n","        # Arguments\n","            chars: Characters that can appear in the input.\n","        \"\"\"\n","        self.chars = sorted(set(chars))\n","        self.char_indices = dict((c, i) for i, c in enumerate(self.chars))\n","        self.indices_char = dict((i, c) for i, c in enumerate(self.chars))\n","\n","    def encode(self, C, num_rows):\n","        \"\"\"One-hot encode given string C.\n","        # Arguments\n","            C: string, to be encoded.\n","            num_rows: Number of rows in the returned one-hot encoding. This is\n","                used to keep the # of rows for each data the same.\n","        \"\"\"\n","        x = np.zeros((num_rows, len(self.chars)))\n","        for i, c in enumerate(C):\n","            x[i, self.char_indices[c]] = 1\n","        return x\n","\n","    def decode(self, x, calc_argmax=True):\n","        \"\"\"Decode the given vector or 2D array to their character output.\n","        # Arguments\n","            x: A vector or a 2D array of probabilities or one-hot representations;\n","                or a vector of character indices (used with `calc_argmax=False`).\n","            calc_argmax: Whether to find the character index with maximum\n","                probability, defaults to `True`.\n","        \"\"\"\n","        if calc_argmax:\n","            x = x.argmax(axis=-1)\n","        return \"\".join(self.indices_char[x] for x in x)\n","\n","\n","# All the numbers, plus sign and space for padding.\n","chars = \"0123456789+ \"\n","ctable = CharacterTable(chars)\n","\n","questions = []\n","expected = []\n","seen = set()\n","print(\"Generating data...\")\n","while len(questions) < TRAINING_SIZE:\n","    f = lambda: int(\n","        \"\".join(\n","            np.random.choice(list(\"0123456789\"))\n","            for i in range(np.random.randint(1, DIGITS + 1))\n","        )\n","    )\n","    a, b = f(), f()\n","    # Skip any addition questions we've already seen\n","    # Also skip any such that x+Y == Y+x (hence the sorting).\n","    key = tuple(sorted((a, b)))\n","    if key in seen:\n","        continue\n","    seen.add(key)\n","    # Pad the data with spaces such that it is always MAXLEN.\n","    q = \"{}+{}\".format(a, b)\n","    query = q + \" \" * (MAXLEN - len(q))\n","    ans = str(a + b)\n","    # Answers can be of maximum size DIGITS + 1.\n","    ans += \" \" * (DIGITS + 1 - len(ans))\n","    if REVERSE:\n","        # Reverse the query, e.g., '12+345  ' becomes '  543+21'. (Note the\n","        # space used for padding.)\n","        query = query[::-1]\n","    questions.append(query)\n","    expected.append(ans)\n","print(\"Total questions:\", len(questions))\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Generating data...\n","Total questions: 50000\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IhcRJWZEZIQE","executionInfo":{"status":"ok","timestamp":1619176247874,"user_tz":-330,"elapsed":1263,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"5d6fbe5d-4533-4847-e119-1cd371635218"},"source":["np.zeros((len(questions), MAXLEN, len(chars)), dtype=np.bool)[0]"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[False, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","        False, False, False]])"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"guhFKkgbbw79","executionInfo":{"status":"ok","timestamp":1619176417659,"user_tz":-330,"elapsed":739,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"94084ab8-6054-425b-c4e4-6d3164ef760d"},"source":["x[0]"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[ True, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [ True, False, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False,  True, False,\n","        False, False, False],\n","       [False, False, False, False, False, False, False, False, False,\n","         True, False, False],\n","       [False, False, False, False, False,  True, False, False, False,\n","        False, False, False],\n","       [False,  True, False, False, False, False, False, False, False,\n","        False, False, False],\n","       [False, False,  True, False, False, False, False, False, False,\n","        False, False, False]])"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"kF4kp-P_bWsN","executionInfo":{"status":"ok","timestamp":1619176373492,"user_tz":-330,"elapsed":1116,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"1b224184-2d17-47d1-8a2a-d701b27d6fac"},"source":["print(\"Vectorization...\")\n","x = np.zeros((len(questions), MAXLEN, len(chars)), dtype=np.bool)\n","y = np.zeros((len(questions), DIGITS + 1, len(chars)), dtype=np.bool)\n","for i, sentence in enumerate(questions):\n","    x[i] = ctable.encode(sentence, MAXLEN)\n","for i, sentence in enumerate(expected):\n","    y[i] = ctable.encode(sentence, DIGITS + 1)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["Vectorization...\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Asb2XzzyW-Y5"},"source":["## Vectorize the data\n"]},{"cell_type":"code","metadata":{"id":"agkHw7AbW-Y6","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619176447401,"user_tz":-330,"elapsed":1514,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"acb46b36-5158-402e-b15b-c5aa7414a37b"},"source":["print(\"Vectorization...\")\n","x = np.zeros((len(questions), MAXLEN, len(chars)), dtype=np.bool)\n","y = np.zeros((len(questions), DIGITS + 1, len(chars)), dtype=np.bool)\n","for i, sentence in enumerate(questions):\n","    x[i] = ctable.encode(sentence, MAXLEN)\n","for i, sentence in enumerate(expected):\n","    y[i] = ctable.encode(sentence, DIGITS + 1)\n","\n","# Shuffle (x, y) in unison as the later parts of x will almost all be larger\n","# digits.\n","indices = np.arange(len(y))\n","np.random.shuffle(indices)\n","x = x[indices]\n","y = y[indices]\n","\n","# Explicitly set apart 10% for validation data that we never train over.\n","split_at = len(x) - len(x) // 10\n","(x_train, x_val) = x[:split_at], x[split_at:]\n","(y_train, y_val) = y[:split_at], y[split_at:]\n","\n","print(\"Training Data:\")\n","print(x_train.shape)\n","print(y_train.shape)\n","\n","print(\"Validation Data:\")\n","print(x_val.shape)\n","print(y_val.shape)\n"],"execution_count":19,"outputs":[{"output_type":"stream","text":["Vectorization...\n","Training Data:\n","(45000, 7, 12)\n","(45000, 4, 12)\n","Validation Data:\n","(5000, 7, 12)\n","(5000, 4, 12)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"-AZdFXcnYtGS","executionInfo":{"status":"ok","timestamp":1619176455091,"user_tz":-330,"elapsed":1565,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}}},"source":[""],"execution_count":19,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"lL2pakZRW-Y8"},"source":["## Build the model\n"]},{"cell_type":"code","metadata":{"id":"WdVqkjZFW-Y8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619176459838,"user_tz":-330,"elapsed":2175,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"11812e8c-1328-4673-e36e-3d690e2e29d6"},"source":["print(\"Build model...\")\n","num_layers = 1  # Try to add more LSTM layers!\n","\n","model = keras.Sequential()\n","# \"Encode\" the input sequence using a LSTM, producing an output of size 128.\n","# Note: In a situation where your input sequences have a variable length,\n","# use input_shape=(None, num_feature).\n","model.add(layers.LSTM(128, input_shape=(MAXLEN, len(chars))))\n","# As the decoder RNN's input, repeatedly provide with the last output of\n","# RNN for each time step. Repeat 'DIGITS + 1' times as that's the maximum\n","# length of output, e.g., when DIGITS=3, max output is 999+999=1998.\n","model.add(layers.RepeatVector(DIGITS + 1))\n","# The decoder RNN could be multiple layers stacked or a single layer.\n","for _ in range(num_layers):\n","    # By setting return_sequences to True, return not only the last output but\n","    # all the outputs so far in the form of (num_samples, timesteps,\n","    # output_dim). This is necessary as TimeDistributed in the below expects\n","    # the first dimension to be the timesteps.\n","    model.add(layers.LSTM(128, return_sequences=True))\n","\n","# Apply a dense layer to the every temporal slice of an input. For each of step\n","# of the output sequence, decide which character should be chosen.\n","model.add(layers.Dense(len(chars), activation=\"softmax\"))\n","model.compile(loss=\"categorical_crossentropy\", optimizer=\"adam\", metrics=[\"accuracy\"])\n","model.summary()\n"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Build model...\n","Model: \"sequential\"\n","_________________________________________________________________\n","Layer (type)                 Output Shape              Param #   \n","=================================================================\n","lstm (LSTM)                  (None, 128)               72192     \n","_________________________________________________________________\n","repeat_vector (RepeatVector) (None, 4, 128)            0         \n","_________________________________________________________________\n","lstm_1 (LSTM)                (None, 4, 128)            131584    \n","_________________________________________________________________\n","dense (Dense)                (None, 4, 12)             1548      \n","=================================================================\n","Total params: 205,324\n","Trainable params: 205,324\n","Non-trainable params: 0\n","_________________________________________________________________\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bI38V6KEfBYJ","executionInfo":{"status":"ok","timestamp":1619177337399,"user_tz":-330,"elapsed":1059,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"5fbc0484-e786-48db-b32c-933d37cb0f39"},"source":["x_train[0], y_train[0]"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(array([[ True, False, False, False, False, False, False, False, False,\n","         False, False, False],\n","        [False, False, False, False, False, False, False, False, False,\n","          True, False, False],\n","        [False, False, False,  True, False, False, False, False, False,\n","         False, False, False],\n","        [False, False, False, False, False, False,  True, False, False,\n","         False, False, False],\n","        [False,  True, False, False, False, False, False, False, False,\n","         False, False, False],\n","        [False, False,  True, False, False, False, False, False, False,\n","         False, False, False],\n","        [False, False, False, False, False, False, False, False, False,\n","          True, False, False]]),\n"," array([[False, False, False, False, False, False,  True, False, False,\n","         False, False, False],\n","        [False, False, False, False, False, False, False, False, False,\n","         False,  True, False],\n","        [False, False, False, False, False, False, False, False, False,\n","          True, False, False],\n","        [ True, False, False, False, False, False, False, False, False,\n","         False, False, False]]))"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"xftrEo2CfuuV","executionInfo":{"status":"ok","timestamp":1619177694146,"user_tz":-330,"elapsed":1369,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"8cf0d919-b858-4b27-b08d-09033d6fefdc"},"source":["ctable.decode(rowy[0]), rowy[0]"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('216 ', array([[False, False, False, False,  True, False, False, False, False,\n","         False, False, False],\n","        [False, False, False,  True, False, False, False, False, False,\n","         False, False, False],\n","        [False, False, False, False, False, False, False, False,  True,\n","         False, False, False],\n","        [ True, False, False, False, False, False, False, False, False,\n","         False, False, False]]))"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"markdown","metadata":{"id":"L8N1s42kW-Y9"},"source":["## Train the model\n"]},{"cell_type":"code","metadata":{"id":"i8O14h_IW-Y9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619177030820,"user_tz":-330,"elapsed":564928,"user":{"displayName":"Hari Thapliyaal","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Ghe9hJnok_MYMV4Ol_O45RoplvJrRkuikXSvQWNtg=s64","userId":"09088303666341280217"}},"outputId":"10fdf341-c42a-4c06-9be0-161412d19d21"},"source":["epochs = 30\n","batch_size = 32\n","\n","\n","# Train the model each generation and show predictions against the validation\n","# dataset.\n","for epoch in range(1, epochs):\n","    print()\n","    print(\"Iteration\", epoch)\n","    model.fit(\n","        x_train,\n","        y_train,\n","        batch_size=batch_size,\n","        epochs=1,\n","        validation_data=(x_val, y_val),\n","    )\n","    # Select 10 samples from the validation set at random so we can visualize\n","    # errors.\n","    for i in range(10):\n","        ind = np.random.randint(0, len(x_val))\n","        rowx, rowy = x_val[np.array([ind])], y_val[np.array([ind])]\n","        preds = np.argmax(model.predict(rowx), axis=-1)\n","        q = ctable.decode(rowx[0])\n","        correct = ctable.decode(rowy[0])\n","        guess = ctable.decode(preds[0], calc_argmax=False)\n","        print(\"Q\", q[::-1] if REVERSE else q, end=\" \")\n","        print(\"T\", correct, end=\" \")\n","        if correct == guess:\n","            print(\"☑ \" + guess)\n","        else:\n","            print(\"☒ \" + guess)\n"],"execution_count":21,"outputs":[{"output_type":"stream","text":["\n","Iteration 1\n","1407/1407 [==============================] - 22s 13ms/step - loss: 1.8871 - accuracy: 0.3217 - val_loss: 1.5500 - val_accuracy: 0.4174\n","Q 938+88  T 1026 ☒ 902 \n","Q 52+301  T 353  ☒ 365 \n","Q 628+343 T 971  ☒ 110 \n","Q 58+2    T 60   ☒ 10  \n","Q 31+400  T 431  ☒ 335 \n","Q 4+311   T 315  ☒ 333 \n","Q 7+11    T 18   ☒ 12  \n","Q 94+141  T 235  ☒ 522 \n","Q 263+916 T 1179 ☒ 1129\n","Q 4+148   T 152  ☒ 445 \n","\n","Iteration 2\n","1407/1407 [==============================] - 18s 13ms/step - loss: 1.3375 - accuracy: 0.4983 - val_loss: 1.1637 - val_accuracy: 0.5645\n","Q 55+949  T 1004 ☒ 1012\n","Q 842+66  T 908  ☒ 801 \n","Q 459+163 T 622  ☒ 629 \n","Q 405+64  T 469  ☒ 483 \n","Q 554+0   T 554  ☒ 550 \n","Q 90+479  T 569  ☒ 541 \n","Q 21+17   T 38   ☑ 38  \n","Q 657+92  T 749  ☒ 721 \n","Q 262+45  T 307  ☒ 399 \n","Q 80+331  T 411  ☒ 303 \n","\n","Iteration 3\n","1407/1407 [==============================] - 18s 13ms/step - loss: 1.0547 - accuracy: 0.6081 - val_loss: 0.9625 - val_accuracy: 0.6389\n","Q 901+65  T 966  ☒ 974 \n","Q 66+370  T 436  ☒ 427 \n","Q 822+850 T 1672 ☒ 1618\n","Q 29+855  T 884  ☒ 887 \n","Q 411+450 T 861  ☒ 854 \n","Q 62+22   T 84   ☒ 99  \n","Q 11+973  T 984  ☒ 980 \n","Q 375+93  T 468  ☒ 470 \n","Q 154+3   T 157  ☒ 155 \n","Q 16+249  T 265  ☒ 267 \n","\n","Iteration 4\n","1407/1407 [==============================] - 18s 13ms/step - loss: 0.8994 - accuracy: 0.6661 - val_loss: 0.8329 - val_accuracy: 0.6929\n","Q 627+952 T 1579 ☒ 1580\n","Q 548+264 T 812  ☑ 812 \n","Q 928+71  T 999  ☒ 990 \n","Q 71+876  T 947  ☒ 942 \n","Q 92+514  T 606  ☑ 606 \n","Q 90+812  T 902  ☒ 990 \n","Q 44+155  T 199  ☒ 202 \n","Q 131+351 T 482  ☒ 481 \n","Q 793+598 T 1391 ☒ 1278\n","Q 61+263  T 324  ☒ 322 \n","\n","Iteration 5\n","1407/1407 [==============================] - 18s 13ms/step - loss: 0.7854 - accuracy: 0.7120 - val_loss: 0.7433 - val_accuracy: 0.7301\n","Q 504+482 T 986  ☑ 986 \n","Q 39+30   T 69   ☒ 66  \n","Q 357+637 T 994  ☒ 990 \n","Q 155+740 T 895  ☒ 893 \n","Q 217+12  T 229  ☑ 229 \n","Q 571+281 T 852  ☒ 844 \n","Q 0+855   T 855  ☒ 858 \n","Q 364+871 T 1235 ☒ 1238\n","Q 662+547 T 1209 ☒ 1213\n","Q 814+427 T 1241 ☒ 1244\n","\n","Iteration 6\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.7094 - accuracy: 0.7415 - val_loss: 0.6758 - val_accuracy: 0.7528\n","Q 56+184  T 240  ☒ 241 \n","Q 9+750   T 759  ☒ 769 \n","Q 918+151 T 1069 ☒ 1072\n","Q 108+7   T 115  ☒ 112 \n","Q 11+395  T 406  ☒ 409 \n","Q 165+472 T 637  ☒ 639 \n","Q 43+986  T 1029 ☒ 1025\n","Q 5+793   T 798  ☒ 791 \n","Q 7+690   T 697  ☒ 699 \n","Q 98+508  T 606  ☒ 602 \n","\n","Iteration 7\n","1407/1407 [==============================] - 18s 13ms/step - loss: 0.6225 - accuracy: 0.7725 - val_loss: 0.5426 - val_accuracy: 0.8040\n","Q 511+405 T 916  ☒ 928 \n","Q 0+380   T 380  ☒ 381 \n","Q 34+921  T 955  ☒ 945 \n","Q 17+798  T 815  ☒ 817 \n","Q 52+6    T 58   ☑ 58  \n","Q 68+986  T 1054 ☒ 1051\n","Q 106+0   T 106  ☑ 106 \n","Q 8+97    T 105  ☒ 107 \n","Q 807+973 T 1780 ☒ 1777\n","Q 776+62  T 838  ☒ 839 \n","\n","Iteration 8\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.3955 - accuracy: 0.8639 - val_loss: 0.2681 - val_accuracy: 0.9230\n","Q 159+458 T 617  ☒ 616 \n","Q 135+376 T 511  ☒ 411 \n","Q 86+712  T 798  ☑ 798 \n","Q 8+586   T 594  ☒ 595 \n","Q 381+1   T 382  ☒ 381 \n","Q 24+293  T 317  ☑ 317 \n","Q 5+716   T 721  ☒ 722 \n","Q 67+174  T 241  ☑ 241 \n","Q 76+58   T 134  ☑ 134 \n","Q 210+612 T 822  ☒ 823 \n","\n","Iteration 9\n","1407/1407 [==============================] - 18s 13ms/step - loss: 0.2150 - accuracy: 0.9416 - val_loss: 0.1822 - val_accuracy: 0.9461\n","Q 733+3   T 736  ☑ 736 \n","Q 668+299 T 967  ☒ 956 \n","Q 26+433  T 459  ☒ 469 \n","Q 456+51  T 507  ☑ 507 \n","Q 38+702  T 740  ☑ 740 \n","Q 53+210  T 263  ☑ 263 \n","Q 719+26  T 745  ☑ 745 \n","Q 46+174  T 220  ☑ 220 \n","Q 5+197   T 202  ☒ 203 \n","Q 61+42   T 103  ☑ 103 \n","\n","Iteration 10\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.1155 - accuracy: 0.9744 - val_loss: 0.1112 - val_accuracy: 0.9708\n","Q 277+725 T 1002 ☑ 1002\n","Q 407+34  T 441  ☑ 441 \n","Q 63+85   T 148  ☑ 148 \n","Q 5+402   T 407  ☑ 407 \n","Q 229+74  T 303  ☑ 303 \n","Q 91+96   T 187  ☒ 188 \n","Q 79+908  T 987  ☑ 987 \n","Q 207+830 T 1037 ☒ 1028\n","Q 881+89  T 970  ☑ 970 \n","Q 76+17   T 93   ☑ 93  \n","\n","Iteration 11\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.0861 - accuracy: 0.9791 - val_loss: 0.0827 - val_accuracy: 0.9752\n","Q 723+782 T 1505 ☑ 1505\n","Q 292+356 T 648  ☑ 648 \n","Q 711+75  T 786  ☑ 786 \n","Q 703+652 T 1355 ☑ 1355\n","Q 456+135 T 591  ☑ 591 \n","Q 25+42   T 67   ☑ 67  \n","Q 87+441  T 528  ☑ 528 \n","Q 14+423  T 437  ☑ 437 \n","Q 19+771  T 790  ☒ 780 \n","Q 615+103 T 718  ☑ 718 \n","\n","Iteration 12\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.0648 - accuracy: 0.9839 - val_loss: 0.0499 - val_accuracy: 0.9886\n","Q 786+236 T 1022 ☑ 1022\n","Q 84+827  T 911  ☑ 911 \n","Q 816+16  T 832  ☑ 832 \n","Q 53+525  T 578  ☑ 578 \n","Q 97+129  T 226  ☑ 226 \n","Q 99+950  T 1049 ☒ 1059\n","Q 18+605  T 623  ☑ 623 \n","Q 26+465  T 491  ☑ 491 \n","Q 684+394 T 1078 ☑ 1078\n","Q 96+298  T 394  ☑ 394 \n","\n","Iteration 13\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.0430 - accuracy: 0.9901 - val_loss: 0.0584 - val_accuracy: 0.9807\n","Q 15+770  T 785  ☒ 784 \n","Q 49+339  T 388  ☒ 398 \n","Q 33+316  T 349  ☑ 349 \n","Q 888+936 T 1824 ☒ 1823\n","Q 425+89  T 514  ☑ 514 \n","Q 959+784 T 1743 ☑ 1743\n","Q 49+428  T 477  ☒ 487 \n","Q 27+320  T 347  ☑ 347 \n","Q 748+15  T 763  ☑ 763 \n","Q 823+445 T 1268 ☑ 1268\n","\n","Iteration 14\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.0548 - accuracy: 0.9846 - val_loss: 0.0341 - val_accuracy: 0.9917\n","Q 491+780 T 1271 ☑ 1271\n","Q 375+399 T 774  ☑ 774 \n","Q 89+231  T 320  ☑ 320 \n","Q 75+46   T 121  ☑ 121 \n","Q 57+754  T 811  ☑ 811 \n","Q 49+188  T 237  ☑ 237 \n","Q 957+6   T 963  ☑ 963 \n","Q 541+827 T 1368 ☑ 1368\n","Q 806+37  T 843  ☑ 843 \n","Q 294+974 T 1268 ☑ 1268\n","\n","Iteration 15\n","1407/1407 [==============================] - 18s 13ms/step - loss: 0.0354 - accuracy: 0.9912 - val_loss: 0.0231 - val_accuracy: 0.9955\n","Q 333+39  T 372  ☑ 372 \n","Q 21+16   T 37   ☑ 37  \n","Q 290+30  T 320  ☑ 320 \n","Q 73+31   T 104  ☑ 104 \n","Q 389+37  T 426  ☑ 426 \n","Q 147+725 T 872  ☑ 872 \n","Q 56+36   T 92   ☑ 92  \n","Q 88+723  T 811  ☑ 811 \n","Q 549+401 T 950  ☑ 950 \n","Q 92+213  T 305  ☑ 305 \n","\n","Iteration 16\n","1407/1407 [==============================] - 18s 13ms/step - loss: 0.0313 - accuracy: 0.9917 - val_loss: 0.0288 - val_accuracy: 0.9923\n","Q 357+8   T 365  ☑ 365 \n","Q 763+26  T 789  ☑ 789 \n","Q 61+423  T 484  ☑ 484 \n","Q 4+909   T 913  ☑ 913 \n","Q 546+415 T 961  ☑ 961 \n","Q 859+0   T 859  ☑ 859 \n","Q 350+286 T 636  ☑ 636 \n","Q 5+402   T 407  ☑ 407 \n","Q 131+22  T 153  ☑ 153 \n","Q 953+178 T 1131 ☑ 1131\n","\n","Iteration 17\n","1407/1407 [==============================] - 18s 13ms/step - loss: 0.0283 - accuracy: 0.9932 - val_loss: 0.0110 - val_accuracy: 0.9983\n","Q 277+725 T 1002 ☑ 1002\n","Q 2+844   T 846  ☑ 846 \n","Q 205+53  T 258  ☑ 258 \n","Q 825+740 T 1565 ☑ 1565\n","Q 239+36  T 275  ☑ 275 \n","Q 844+745 T 1589 ☑ 1589\n","Q 48+104  T 152  ☑ 152 \n","Q 645+59  T 704  ☑ 704 \n","Q 88+24   T 112  ☑ 112 \n","Q 276+98  T 374  ☑ 374 \n","\n","Iteration 18\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.0344 - accuracy: 0.9906 - val_loss: 0.0183 - val_accuracy: 0.9965\n","Q 378+5   T 383  ☑ 383 \n","Q 81+199  T 280  ☑ 280 \n","Q 71+820  T 891  ☑ 891 \n","Q 256+32  T 288  ☑ 288 \n","Q 284+802 T 1086 ☑ 1086\n","Q 56+35   T 91   ☑ 91  \n","Q 505+43  T 548  ☑ 548 \n","Q 610+82  T 692  ☑ 692 \n","Q 28+944  T 972  ☑ 972 \n","Q 65+64   T 129  ☑ 129 \n","\n","Iteration 19\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.0233 - accuracy: 0.9941 - val_loss: 0.1131 - val_accuracy: 0.9608\n","Q 37+142  T 179  ☑ 179 \n","Q 237+98  T 335  ☑ 335 \n","Q 479+801 T 1280 ☑ 1280\n","Q 204+4   T 208  ☑ 208 \n","Q 629+892 T 1521 ☑ 1521\n","Q 563+83  T 646  ☑ 646 \n","Q 341+208 T 549  ☑ 549 \n","Q 590+145 T 735  ☑ 735 \n","Q 807+31  T 838  ☑ 838 \n","Q 723+404 T 1127 ☑ 1127\n","\n","Iteration 20\n","1407/1407 [==============================] - 19s 13ms/step - loss: 0.0165 - accuracy: 0.9958 - val_loss: 0.0425 - val_accuracy: 0.9861\n","Q 208+446 T 654  ☑ 654 \n","Q 42+285  T 327  ☑ 327 \n","Q 753+90  T 843  ☑ 843 \n","Q 676+358 T 1034 ☑ 1034\n","Q 28+38   T 66   ☑ 66  \n","Q 266+2   T 268  ☑ 268 \n","Q 96+42   T 138  ☑ 138 \n","Q 18+242  T 260  ☑ 260 \n","Q 7+519   T 526  ☒ 525 \n","Q 273+37  T 310  ☑ 310 \n","\n","Iteration 21\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0259 - accuracy: 0.9929 - val_loss: 0.0077 - val_accuracy: 0.9987\n","Q 81+391  T 472  ☑ 472 \n","Q 740+814 T 1554 ☑ 1554\n","Q 536+31  T 567  ☑ 567 \n","Q 49+474  T 523  ☑ 523 \n","Q 15+65   T 80   ☑ 80  \n","Q 59+283  T 342  ☑ 342 \n","Q 86+146  T 232  ☑ 232 \n","Q 19+186  T 205  ☑ 205 \n","Q 554+24  T 578  ☑ 578 \n","Q 35+358  T 393  ☑ 393 \n","\n","Iteration 22\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0262 - accuracy: 0.9930 - val_loss: 0.0103 - val_accuracy: 0.9979\n","Q 844+41  T 885  ☑ 885 \n","Q 5+218   T 223  ☑ 223 \n","Q 242+320 T 562  ☑ 562 \n","Q 266+2   T 268  ☑ 268 \n","Q 223+368 T 591  ☑ 591 \n","Q 392+35  T 427  ☑ 427 \n","Q 97+583  T 680  ☑ 680 \n","Q 701+63  T 764  ☑ 764 \n","Q 778+69  T 847  ☑ 847 \n","Q 205+53  T 258  ☑ 258 \n","\n","Iteration 23\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0202 - accuracy: 0.9943 - val_loss: 0.0637 - val_accuracy: 0.9819\n","Q 168+928 T 1096 ☑ 1096\n","Q 5+150   T 155  ☑ 155 \n","Q 14+874  T 888  ☑ 888 \n","Q 25+457  T 482  ☑ 482 \n","Q 69+64   T 133  ☑ 133 \n","Q 93+798  T 891  ☑ 891 \n","Q 217+470 T 687  ☑ 687 \n","Q 703+14  T 717  ☑ 717 \n","Q 770+815 T 1585 ☑ 1585\n","Q 657+87  T 744  ☑ 744 \n","\n","Iteration 24\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0092 - accuracy: 0.9979 - val_loss: 0.0051 - val_accuracy: 0.9990\n","Q 149+996 T 1145 ☑ 1145\n","Q 852+98  T 950  ☑ 950 \n","Q 72+9    T 81   ☑ 81  \n","Q 3+532   T 535  ☑ 535 \n","Q 872+205 T 1077 ☑ 1077\n","Q 88+553  T 641  ☑ 641 \n","Q 331+22  T 353  ☑ 353 \n","Q 691+12  T 703  ☑ 703 \n","Q 520+549 T 1069 ☑ 1069\n","Q 123+6   T 129  ☑ 129 \n","\n","Iteration 25\n","1407/1407 [==============================] - 20s 14ms/step - loss: 0.0253 - accuracy: 0.9928 - val_loss: 0.0174 - val_accuracy: 0.9951\n","Q 21+89   T 110  ☑ 110 \n","Q 14+185  T 199  ☑ 199 \n","Q 189+8   T 197  ☑ 197 \n","Q 53+530  T 583  ☑ 583 \n","Q 11+395  T 406  ☑ 406 \n","Q 479+1   T 480  ☑ 480 \n","Q 197+44  T 241  ☑ 241 \n","Q 952+80  T 1032 ☑ 1032\n","Q 68+342  T 410  ☑ 410 \n","Q 803+6   T 809  ☑ 809 \n","\n","Iteration 26\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0164 - accuracy: 0.9955 - val_loss: 0.0039 - val_accuracy: 0.9995\n","Q 935+11  T 946  ☑ 946 \n","Q 544+380 T 924  ☑ 924 \n","Q 27+93   T 120  ☑ 120 \n","Q 177+63  T 240  ☑ 240 \n","Q 642+170 T 812  ☑ 812 \n","Q 19+67   T 86   ☑ 86  \n","Q 27+392  T 419  ☑ 419 \n","Q 894+25  T 919  ☑ 919 \n","Q 599+90  T 689  ☑ 689 \n","Q 35+39   T 74   ☑ 74  \n","\n","Iteration 27\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0198 - accuracy: 0.9946 - val_loss: 0.0041 - val_accuracy: 0.9994\n","Q 2+613   T 615  ☑ 615 \n","Q 592+70  T 662  ☑ 662 \n","Q 270+981 T 1251 ☑ 1251\n","Q 169+528 T 697  ☑ 697 \n","Q 78+132  T 210  ☑ 210 \n","Q 662+731 T 1393 ☑ 1393\n","Q 4+22    T 26   ☑ 26  \n","Q 856+79  T 935  ☑ 935 \n","Q 726+5   T 731  ☑ 731 \n","Q 806+34  T 840  ☑ 840 \n","\n","Iteration 28\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0195 - accuracy: 0.9944 - val_loss: 0.0491 - val_accuracy: 0.9853\n","Q 177+63  T 240  ☑ 240 \n","Q 402+78  T 480  ☑ 480 \n","Q 67+86   T 153  ☑ 153 \n","Q 6+745   T 751  ☑ 751 \n","Q 58+448  T 506  ☑ 506 \n","Q 328+692 T 1020 ☑ 1020\n","Q 5+524   T 529  ☑ 529 \n","Q 314+897 T 1211 ☑ 1211\n","Q 850+44  T 894  ☑ 894 \n","Q 51+74   T 125  ☑ 125 \n","\n","Iteration 29\n","1407/1407 [==============================] - 19s 14ms/step - loss: 0.0095 - accuracy: 0.9978 - val_loss: 0.0060 - val_accuracy: 0.9985\n","Q 95+71   T 166  ☑ 166 \n","Q 619+308 T 927  ☑ 927 \n","Q 678+255 T 933  ☑ 933 \n","Q 66+530  T 596  ☑ 596 \n","Q 4+555   T 559  ☑ 559 \n","Q 45+742  T 787  ☑ 787 \n","Q 0+223   T 223  ☑ 223 \n","Q 593+688 T 1281 ☑ 1281\n","Q 72+365  T 437  ☑ 437 \n","Q 799+0   T 799  ☑ 799 \n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Sirf9Q3bW-Y_"},"source":["You'll get to 99+% validation accuracy after ~30 epochs.\n"]}]}